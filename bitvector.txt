bitvector

(consider the values +1/-1 and then do the math.
the 0 makes the additions go wonky. but in a way, something like XNOR might do it in one step.

00 1
01 0
10 0
11 1

)

- * - = +   00 > 1
+ * - = -   10 > 0
- * + = -   01 > 0
+ * + = +   11 > 1

so we can safely assume -1/1 for values, just use standard bits.
When we multiply, though, we use -1 instead of 0.. but then it might be fine

magnitude:   sqrt(sum of all fields). but since binary.. just sum the fields and sqrt
dot product:  mult the two together, where match. but shr on second so can be 0.5
dp/(magA*magB)  = cosine similarity

01011111
01101100
++--++-- = 50% similarity

+ = match, - = opposite

so XNOR, count the 1's, divide by number of places. WAY faster than the cosine.

"bit similarity"

let's see what it would look like of we us -1 for those 0s


Population count.
https://en.wikipedia.org/wiki/Hamming_weight

granted, a simple 4 bit lookup makes the problem smaller. O(1)
then just write it out for 64k or something for 8 bits. fast fast
0000 = 0
0001 = 1
0010 = 1
0011 = 2

Then just look it up. 8 bits would cover quite a bit, can break a problem into pieces easily in C
some 64bit integer > 8X8bit words in C, lookup from 64k map... four operations per int.

 int BitCount(unsigned int u)
    {
         unsigned int uCount;

         uCount = u - ((u >> 1) & 033333333333) - ((u >> 2) & 011111111111);
         return ((uCount + (uCount >> 3)) & 030707070707) % 63;
    }

From: https://web.archive.org/web/20151229003112/http://blogs.msdn.com/b/jeuge/archive/2005/06/08/hakmem-bit-count.aspx
Explained: https://tekpool.wordpress.com/category/bit-count/
